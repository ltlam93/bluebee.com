KNOWN BUGS
==========

- "args" arguments cannot be passed by reference. This restriction makes
impossible to declare functions like scanf("...", $x) as PHPLint always
tells "$x is not defined".

- foreach(EXPR as ...: EXPR must be a proper variable, not a generic
expression. For example, foreach(array(1,2,3) as ... isn't allowed.

- $a[][1] = 3;  yields fatal error because PHPLint pretends the [] operator
  be the very last index.

- Namespace resolution is performed in the order of declaration, while PHP
  resolves names after parsing stage. Then, for example:
  
  namespace xxx;
  echo strlen("aaa");
  function strlen($s){ return $s; }
  
  PHPLint assumes "echo" will call \strlen(), while PHP actually will call
  \xxx\strlen(), this latter function being still unknown to PHPLint at the
  time the "echo" statement gets parsed. Things go in the right way if all
  is declared in bottom-up order.


KNOWN MISSING FEATURES
======================

- Assignment of a single char of a string not allowed in PHPLint:

  $s = "abc";
  $s[1] = "z"; <== invalid left hand side in assignment

  Considering the issues and the complications that might arise from the
  implementation of such a feature in a future compiled language (also
  think at func. arg. passed by reference) it is unlikely such a feature
  will ever be implemented under PHPLint.

- Literal binary numbers. Hint: use decimal, octal o hex numbers instead.

- Variable variable: $$v.
- Variable function: $f().
- Variable class: new $c().
- Variable method: $obj->$m().

- Variable name in curly braces ${xxx}.

- Only simple vars allowed in double-quoted string "Found $n elements.".
  Array and complex curly bra variables not allowed.
 
- Not implemented:
  goto LABEL;
  break EXPR; (only "break;" it is)
  continue EXPR; (only "continue;" it is)

- Alternate syntax for control structures, example:
  if(EXPR):  ...  endif;
  switch(EXPR):   endswitch;
  ...

- "case LABEL": the label must be a static expression evaluable at parse time,
  then cannot include variables nor functions.

- Files included by require*() and include*() cannot "return EXPR" a value.

- Traits.

- Anonymous functions (also known as "closures"). Hint: use classes instead.

- Generators.
